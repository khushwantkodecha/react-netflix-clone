{"version":3,"sources":["images/logo3.png","images/profile2.png","requests.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","requests","tranding","netflix_original","top_rated","action_movies","comedy_movies","horror_movies","romance_movies","documentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","Axios","url","method","then","res","data","results","className","map","movie","key","id","onClick","console","log","movieTrailer","name","video_id","split","substring","catch","alert","handleClick","original_title","src","poster_path","backdrop_path","videoId","opts","height","width","playerVars","autoplay","Banner","setMovie","maxLength","length","randomNumber","Math","floor","random","Fragment","style","backgroundImage","backgroundPosition","backgroundSize","original_name","overview","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","Logo","href","target","color","fontWeight","textDecoration","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.58107b6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo3.a1f673e7.png\";","module.exports = __webpack_public_path__ + \"static/media/profile2.e4498a31.png\";","const API_KEY = \"796082e2f9fcc201acce08bb47153388\";\r\n\r\nexport const requests = {\r\n  tranding: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  netflix_original: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  top_rated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  action_movies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  comedy_movies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  horror_movies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  romance_movies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  documentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { requests } from \"./requests\";\r\nimport Axios from \"axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  const BASE_URL = `https://api.themoviedb.org/3`;\r\n  const IMAGE_URL = `https://image.tmdb.org/t/p/original/`;\r\n\r\n  useEffect(() => {\r\n    Axios({\r\n      url: `${BASE_URL}${fetchUrl}`,\r\n      method: \"GET\",\r\n    }).then((res) => {\r\n      setMovies(res.data.results);\r\n    });\r\n  }, []);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    console.log(movie);\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie.name ? movie.name : movie.title)\r\n        .then((url) => {\r\n          console.log(url);\r\n          var video_id = url.split(\"v=\")[1].substring(0, 11);\r\n          setTrailerUrl(video_id);\r\n        })\r\n        .catch(() => alert(\"Unable to find video Try after refreshing...\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-row\">\r\n      <h3 className=\"row-title\">{title}</h3>\r\n\r\n      <div className=\"row-images\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            title={isLargeRow ? movie.name : movie.original_title}\r\n            className={`row-image ${isLargeRow && \"row-image-large\"}`}\r\n            src={`${IMAGE_URL}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}></YouTube>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport \"./Banner.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Banner({ fetchUrl }) {\r\n  const [movie, setMovie] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  const BASE_URL = `https://api.themoviedb.org/3`;\r\n  const IMAGE_URL = `https://image.tmdb.org/t/p/original/`;\r\n\r\n  useEffect(() => {\r\n    Axios({\r\n      url: `${BASE_URL}${fetchUrl}`,\r\n      method: \"GET\",\r\n    }).then((res) => {\r\n      const maxLength = res.data.results.length;\r\n      const randomNumber = Math.floor(Math.random() * (maxLength - 1));\r\n      setMovie(res.data.results[randomNumber]);\r\n    });\r\n  }, []);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie.name ? movie.name : movie.title)\r\n        .then((url) => {\r\n          var video_id = url.split(\"v=\")[1].substring(0, 11);\r\n          setTrailerUrl(video_id);\r\n        })\r\n        .catch(() => alert(\"Unable to find video Try after refreshing...\"));\r\n    }\r\n  };\r\n\r\n  const closeYoutube = () => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        className=\"banner\"\r\n        style={{\r\n          backgroundImage: `url(\r\n          'https://image.tmdb.org/t/p/original/${movie.backdrop_path}'\r\n        )`,\r\n          backgroundPosition: \"center center\",\r\n          backgroundSize: \"cover\",\r\n          width: \"100%\",\r\n          height: \"auto\",\r\n        }}\r\n        onClick={closeYoutube}\r\n      >\r\n        <div className=\"banner-contents\">\r\n          <h1 className=\"banner-title\">\r\n            {movie.name || movie.title || movie.original_name}\r\n          </h1>\r\n          <div className=\"banner-buttons\">\r\n            <button\r\n              className=\"banner-button\"\r\n              onClick={() => handleClick(movie)}\r\n            >\r\n              Play Trailer\r\n            </button>\r\n          </div>\r\n          <p className=\"banner-description\">{movie.overview}</p>\r\n        </div>\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}></YouTube>}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Logo from \"./images/logo3.png\";\r\nimport Profile from \"./images/profile2.png\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`nav px-3 ${show && \"nav-black\"}`}>\r\n      <img className=\"nav-logo\" src={Logo} width=\"100\" height=\"50\" />\r\n      {/* <img className=\"nav-profile\" src={Profile} width=\"35\" height=\"35\" /> */}\r\n      <a\r\n        href=\"https://www.github.com/khushwantkodecha\"\r\n        target=\"blank\"\r\n        style={{\r\n          color: \"red\",\r\n          fontWeight: 700,\r\n          textDecoration: \"none\",\r\n        }}\r\n      >\r\n        Fork Me On Github\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { requests } from \"./requests\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner fetchUrl={requests.netflix_original} />\n      <Row\n        title=\"NETFLIX-ORIGINALS\"\n        fetchUrl={requests.netflix_original}\n        isLargeRow\n      />\n      <Row title=\"TOP-RATED\" fetchUrl={requests.top_rated} />\n      <Row title=\"TRANDING\" fetchUrl={requests.tranding} />\n      <Row title=\"ROMANCE\" fetchUrl={requests.romance_movies} />\n      <Row title=\"ACTION\" fetchUrl={requests.action_movies} />\n      <Row title=\"HORROR\" fetchUrl={requests.horror_movies} />\n      {/* <Row title=\"DOCUMENTARIES\" fetchUrl={requests.documentaries} /> */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}